(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{342:function(e,_,a){"use strict";a.r(_);var v=a(4),o=Object(v.a)({},(function(){var e=this,_=e._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"webpack-原理系列九-tree-shaking实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#webpack-原理系列九-tree-shaking实现原理"}},[e._v("#")]),e._v(" Webpack 原理系列九：Tree-Shaking实现原理")]),e._v(" "),_("blockquote",[_("p",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/K5rPkiCfj1I__J6GMfUBLA",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://mp.weixin.qq.com/s/K5rPkiCfj1I__J6GMfUBLA"),_("OutboundLink")],1)])]),e._v(" "),_("h1",{attrs:{id:"一、什么是-tree-shaking"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是-tree-shaking"}},[e._v("#")]),e._v(" 一、什么是 Tree Shaking")]),e._v(" "),_("p",[e._v("Tree-Shaking 是一种基于 ES Module 规范的 Dead Code Elimination 技术，它会在运行过程中静态分析模块之间的导入导出，确定 ESM 模块中哪些导出值未曾其它模块使用，并将其删除，以此实现打包产物的优化。")]),e._v(" "),_("p",[e._v("Tree Shaking 较早前由 Rich Harris 在 Rollup 中率先实现，Webpack 自 2.0 版本开始接入，至今已经成为一种应用广泛的性能优化手段。")]),e._v(" "),_("h2",{attrs:{id:"_1-1-在-webpack-中启动-tree-shaking"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-在-webpack-中启动-tree-shaking"}},[e._v("#")]),e._v(" 1.1 在 Webpack 中启动 Tree Shaking")]),e._v(" "),_("p",[e._v("在 Webpack 中，启动 Tree Shaking 功能必须同时满足三个条件：")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("使用 ESM 规范编写模块代码")])]),e._v(" "),_("li",[_("p",[e._v("配置 "),_("code",[e._v("optimization.usedExports")]),e._v(" 为 "),_("code",[e._v("true")]),e._v("，启动标记功能")])]),e._v(" "),_("li",[_("p",[e._v("启动代码优化功能，可以通过如下方式实现：")])]),e._v(" "),_("li",[_("ul",[_("li",[e._v("配置 "),_("code",[e._v("mode = production")])]),e._v(" "),_("li",[e._v("配置 "),_("code",[e._v("optimization.minimize = true")])]),e._v(" "),_("li",[e._v("提供 "),_("code",[e._v("optimization.minimizer")]),e._v(" 数组")])])])]),e._v(" "),_("p",[e._v("例如：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v('// webpack.config.js\nmodule.exports = {\n  entry: "./src/index",\n  mode: "production",\n  devtool: false,\n  optimization: {\n    usedExports: true,\n  },\n};\n')])])]),_("h2",{attrs:{id:"_1-2-理论基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-理论基础"}},[e._v("#")]),e._v(" 1.2 理论基础")]),e._v(" "),_("p",[e._v("在 CommonJs、AMD、CMD 等旧版本的 JavaScript 模块化方案中，导入导出行为是高度动态，难以预测的，例如：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("if(process.env.NODE_ENV === 'development'){\n  require('./bar');\n  exports.foo = 'foo';\n}\n")])])]),_("p",[e._v("而 ESM 方案则从规范层面规避这一行为，它要求所有的导入导出语句只能出现在模块顶层，且导入导出的模块名必须为字符串常量，这意味着下述代码在 ESM 方案下是非法的：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("if(process.env.NODE_ENV === 'development'){\n  import bar from 'bar';\n  export const foo = 'foo';\n}\n")])])]),_("p",[e._v("所以，ESM 下模块之间的依赖关系是高度确定的，与运行状态无关，编译工具只需要对 ESM 模块做静态分析，就可以从代码字面量中推断出哪些模块值未曾被其它模块使用，这是实现 Tree Shaking 技术的必要条件。")]),e._v(" "),_("h2",{attrs:{id:"_1-3-示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-示例"}},[e._v("#")]),e._v(" 1.3 示例")]),e._v(" "),_("p",[e._v("对于下述代码：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("// index.js\nimport {bar} from './bar';\nconsole.log(bar);\n\n// bar.js\nexport const bar = 'bar';\nexport const foo = 'foo';\n")])])]),_("p",[e._v("示例中，"),_("code",[e._v("bar.js")]),e._v(" 模块导出了 "),_("code",[e._v("bar")]),e._v(" 、"),_("code",[e._v("foo")]),e._v(" ，但只有 "),_("code",[e._v("bar")]),e._v(" 导出值被其它模块使用，经过 Tree Shaking 处理后，"),_("code",[e._v("foo")]),e._v(" 变量会被视作无用代码删除。")]),e._v(" "),_("h1",{attrs:{id:"二、实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、实现原理"}},[e._v("#")]),e._v(" 二、实现原理")]),e._v(" "),_("p",[e._v("Webpack 中，Tree-shaking 的实现一是先"),_("strong",[e._v("标记")]),e._v("出模块导出值中哪些没有被用过，二是使用 Terser 删掉这些没被用到的导出语句。标记过程大致可划分为三个步骤：")]),e._v(" "),_("ul",[_("li",[e._v("Make 阶段，收集模块导出变量并记录到模块依赖关系图 ModuleGraph 变量中")]),e._v(" "),_("li",[e._v("Seal 阶段，遍历 ModuleGraph 标记模块导出变量有没有被使用")]),e._v(" "),_("li",[e._v("生成产物时，若变量没有被其它模块使用则删除对应的导出语句")])]),e._v(" "),_("blockquote",[_("p",[e._v("标记功能需要配置 "),_("code",[e._v("optimization.usedExports = true")]),e._v(" 开启")])]),e._v(" "),_("p",[e._v("也就是说，标记的效果就是删除没有被其它模块使用的导出语句，比如：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/lP9iauFI73zicqIKtS2GZJAscn2mSicDf8VWYtEKibffPSdQFRXGp6uTVvBvI0zJzCuLOrU8zsprlnLiaz5ibiaWp9ZEQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),_("p",[e._v("示例中，"),_("code",[e._v("bar.js")]),e._v(" 模块(左二)导出了两个变量："),_("code",[e._v("bar")]),e._v(" 与 "),_("code",[e._v("foo")]),e._v("，其中 "),_("code",[e._v("foo")]),e._v(" 没有被其它模块用到，所以经过标记后，构建产物(右一)中 "),_("code",[e._v("foo")]),e._v(" 变量对应的导出语句就被删除了。作为对比，如果没有启动标记功能("),_("code",[e._v("optimization.usedExports = false")]),e._v(" 时)，则变量无论有没有被用到都会保留导出语句，如上图右二的产物代码所示。")]),e._v(" "),_("p",[e._v("注意，这个时候 "),_("code",[e._v("foo")]),e._v(" 变量对应的代码 "),_("code",[e._v("const foo='foo'")]),e._v(" 都还保留完整，这是因为标记功能只会影响到模块的导出语句，真正执行“"),_("strong",[e._v("Shaking")]),e._v("”操作的是 Terser 插件。例如在上例中 "),_("code",[e._v("foo")]),e._v(" 变量经过标记后，已经变成一段 Dead Code —— 不可能被执行到的代码，这个时候只需要用 Terser 提供的 DCE 功能就可以删除这一段定义语句，以此实现完整的 Tree Shaking 效果。")]),e._v(" "),_("p",[e._v("接下来我会展开标记过程的源码，详细讲解 Webpack 5 中 Tree Shaking 的实现过程，对源码不感兴趣的同学可以直接跳到下一章。")]),e._v(" "),_("h2",{attrs:{id:"_2-1-收集模块导出"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-收集模块导出"}},[e._v("#")]),e._v(" 2.1 收集模块导出")]),e._v(" "),_("p",[e._v("首先，Webpack 需要弄清楚每个模块分别有什么导出值，这一过程发生在 make 阶段，大体流程：")]),e._v(" "),_("blockquote",[_("p",[e._v("关于 Make 阶段的更多说明，请参考前文 ["),_("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&mid=2247483744&idx=1&sn=d7128a76eed20746cd8c5100f0899138&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("万字总结] 一文吃透 Webpack 核心原理"),_("OutboundLink")],1),e._v(" 。")])]),e._v(" "),_("ol",[_("li",[e._v("将模块的所有 ESM 导出语句转换为 Dependency 对象，并记录到 "),_("code",[e._v("module")]),e._v(" 对象的 "),_("code",[e._v("dependencies")]),e._v(" 集合，转换规则：")])]),e._v(" "),_("ul",[_("li",[e._v("具名导出转换为 "),_("code",[e._v("HarmonyExportSpecifierDependency")]),e._v(" 对象")]),e._v(" "),_("li",[_("code",[e._v("default")]),e._v(" 导出转换为 "),_("code",[e._v("HarmonyExportExpressionDependency")]),e._v(" 对象")])]),e._v(" "),_("p",[e._v("例如对于下面的模块：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("export const bar = 'bar';\nexport const foo = 'foo';\n\nexport default 'foo-bar'\n")])])]),_("p",[e._v("对应的"),_("code",[e._v("dependencies")]),e._v(" 值为：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/lP9iauFI73zicqIKtS2GZJAscn2mSicDf8VW6d3YCknxSkVxxUuILtKbzB9E9LicXKu6vtFRBSh848WJcfRib7luS5w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),_("ol",[_("li",[e._v("所有模块都编译完毕后，触发 "),_("code",[e._v("compilation.hooks.finishModules")]),e._v(" 钩子，开始执行 "),_("code",[e._v("FlagDependencyExportsPlugin")]),e._v(" 插件回调")]),e._v(" "),_("li",[_("code",[e._v("FlagDependencyExportsPlugin")]),e._v(" 插件从 entry 开始读取 ModuleGraph 中存储的模块信息，遍历所有 "),_("code",[e._v("module")]),e._v(" 对象")]),e._v(" "),_("li",[e._v("遍历 "),_("code",[e._v("module")]),e._v(" 对象的 "),_("code",[e._v("dependencies")]),e._v(" 数组，找到所有 "),_("code",[e._v("HarmonyExportXXXDependency")]),e._v(" 类型的依赖对象，将其转换为 "),_("code",[e._v("ExportInfo")]),e._v(" 对象并记录到 ModuleGraph 体系中")])]),e._v(" "),_("p",[e._v("经过 "),_("code",[e._v("FlagDependencyExportsPlugin")]),e._v(" 插件处理后，所有 ESM 风格的 export 语句都会记录在 ModuleGraph 体系内，后续操作就可以从 ModuleGraph 中直接读取出模块的导出值。")]),e._v(" "),_("blockquote",[_("p",[e._v("参考资料：")])]),e._v(" "),_("ol",[_("li",[_("blockquote",[_("p",[e._v("["),_("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&mid=2247483744&idx=1&sn=d7128a76eed20746cd8c5100f0899138&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("万字总结] 一文吃透 Webpack 核心原理"),_("OutboundLink")],1)])])]),e._v(" "),_("li",[_("blockquote",[_("p",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&mid=2247483743&idx=1&sn=0ce0845ee3e5316bcac05993035de3ed&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("有点难的 webpack 知识点：Dependency Graph 深度解析"),_("OutboundLink")],1)])])])]),e._v(" "),_("h2",{attrs:{id:"_2-2-标记模块导出"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-标记模块导出"}},[e._v("#")]),e._v(" 2.2 标记模块导出")]),e._v(" "),_("p",[e._v("模块导出信息收集完毕后，Webpack 需要标记出各个模块的导出列表中，哪些导出值有被其它模块用到，哪些没有，这一过程发生在 Seal 阶段，主流程：")]),e._v(" "),_("ol",[_("li",[e._v("触发 "),_("code",[e._v("compilation.hooks.optimizeDependencies")]),e._v(" 钩子，开始执行 "),_("code",[e._v("FlagDependencyUsagePlugin")]),e._v(" 插件逻辑")]),e._v(" "),_("li",[e._v("在 "),_("code",[e._v("FlagDependencyUsagePlugin")]),e._v(" 插件中，从 entry 开始逐步遍历 ModuleGraph 存储的所有 "),_("code",[e._v("module")]),e._v(" 对象")]),e._v(" "),_("li",[e._v("遍历 "),_("code",[e._v("module")]),e._v(" 对象对应的 "),_("code",[e._v("exportInfo")]),e._v(" 数组")]),e._v(" "),_("li",[e._v("为每一个 "),_("code",[e._v("exportInfo")]),e._v(" 对象执行 "),_("code",[e._v("compilation.getDependencyReferencedExports")]),e._v(" 方法，确定其对应的 "),_("code",[e._v("dependency")]),e._v(" 对象有否被其它模块使用")]),e._v(" "),_("li",[e._v("被任意模块使用到的导出值，调用 "),_("code",[e._v("exportInfo.setUsedConditionally")]),e._v(" 方法将其标记为已被使用。")]),e._v(" "),_("li",[_("code",[e._v("exportInfo.setUsedConditionally")]),e._v(" 内部修改 "),_("code",[e._v("exportInfo._usedInRuntime")]),e._v(" 属性，记录该导出被如何使用")]),e._v(" "),_("li",[e._v("结束")])]),e._v(" "),_("p",[e._v("上面是极度简化过的版本，中间还存在非常多的分支逻辑与复杂的集合操作，我们抓住重点：标记模块导出这一操作集中在 "),_("code",[e._v("FlagDependencyUsagePlugin")]),e._v(" 插件中，执行结果最终会记录在模块导出语句对应的 "),_("code",[e._v("exportInfo._usedInRuntime")]),e._v(" 字典中。")]),e._v(" "),_("h2",{attrs:{id:"_2-3-生成代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-生成代码"}},[e._v("#")]),e._v(" 2.3 生成代码")]),e._v(" "),_("p",[e._v("经过前面的收集与标记步骤后，Webpack 已经在 ModuleGraph 体系中清楚地记录了每个模块都导出了哪些值，每个导出值又没那块模块所使用。接下来，Webpack 会根据导出值的使用情况生成不同的代码，例如：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/lP9iauFI73zicqIKtS2GZJAscn2mSicDf8ViaFabHAicRqhhKcd3KjlJs3SgVJ9BVRvKgSyPClWoBBL8y9mLPE405sA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),_("p",[e._v("重点关注 "),_("code",[e._v("bar.js")]),e._v(" 文件，同样是导出值，"),_("code",[e._v("bar")]),e._v(" 被 "),_("code",[e._v("index.js")]),e._v(" 模块使用因此对应生成了 "),_("code",[e._v("__webpack_require__.d")]),e._v(" 调用 "),_("code",[e._v('"bar": ()=>(/* binding */ bar)')]),e._v("，作为对比 "),_("code",[e._v("foo")]),e._v(" 则仅仅保留了定义语句，没有在 chunk 中生成对应的 export。")]),e._v(" "),_("blockquote",[_("p",[e._v("关于 Webpack 产物的内容及 "),_("code",[e._v("__webpack_require__.d")]),e._v(" 方法的含义，可参考 "),_("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&mid=2247484088&idx=1&sn=41bf509a72f2cbcca1521747bf5e28f4&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack 原理系列六：彻底理解 Webpack 运行时"),_("OutboundLink")],1),e._v(" 一文。")])]),e._v(" "),_("p",[e._v("这一段生成逻辑均由导出语句对应的 "),_("code",[e._v("HarmonyExportXXXDependency")]),e._v(" 类实现，大体的流程：")]),e._v(" "),_("ol",[_("li",[e._v("打包阶段，调用 "),_("code",[e._v("HarmonyExportXXXDependency.Template.apply")]),e._v(" 方法生成代码")]),e._v(" "),_("li",[e._v("在 "),_("code",[e._v("apply")]),e._v(" 方法内，读取 ModuleGraph 中存储的 "),_("code",[e._v("exportsInfo")]),e._v(" 信息，判断哪些导出值被使用，哪些未被使用")]),e._v(" "),_("li",[e._v("对已经被使用及未被使用的导出值，分别创建对应的 "),_("code",[e._v("HarmonyExportInitFragment")]),e._v(" 对象，保存到 "),_("code",[e._v("initFragments")]),e._v(" 数组")]),e._v(" "),_("li",[e._v("遍历 "),_("code",[e._v("initFragments")]),e._v(" 数组，生成最终结果")])]),e._v(" "),_("p",[e._v("基本上，这一步的逻辑就是用前面收集好的 "),_("code",[e._v("exportsInfo")]),e._v(" 对象未模块的导出值分别生成导出语句。")]),e._v(" "),_("h2",{attrs:{id:"_2-4-删除-dead-code"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-删除-dead-code"}},[e._v("#")]),e._v(" 2.4 删除 Dead Code")]),e._v(" "),_("p",[e._v("经过前面几步操作之后，模块导出列表中未被使用的值都不会定义在 "),_("code",[e._v("__webpack_exports__")]),e._v(" 对象中，形成一段不可能被执行的 Dead Code 效果，如上例中的 "),_("code",[e._v("foo")]),e._v(" 变量：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/lP9iauFI73zicqIKtS2GZJAscn2mSicDf8ViaFabHAicRqhhKcd3KjlJs3SgVJ9BVRvKgSyPClWoBBL8y9mLPE405sA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),_("p",[e._v("在此之后，将由 Terser、UglifyJS 等 DCE 工具“摇”掉这部分无效代码，构成完整的 Tree Shaking 操作。")]),e._v(" "),_("h2",{attrs:{id:"_2-5-总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-总结"}},[e._v("#")]),e._v(" 2.5 总结")]),e._v(" "),_("p",[e._v("综上所述，Webpack 中 Tree Shaking 的实现分为如下步骤：")]),e._v(" "),_("ul",[_("li",[e._v("在 "),_("code",[e._v("FlagDependencyExportsPlugin")]),e._v(" 插件中根据模块的 "),_("code",[e._v("dependencies")]),e._v(" 列表收集模块导出值，并记录到 ModuleGraph 体系的 "),_("code",[e._v("exportsInfo")]),e._v(" 中")]),e._v(" "),_("li",[e._v("在 "),_("code",[e._v("FlagDependencyUsagePlugin")]),e._v(" 插件中收集模块的导出值的使用情况，并记录到 "),_("code",[e._v("exportInfo._usedInRuntime")]),e._v(" 集合中")]),e._v(" "),_("li",[e._v("在 "),_("code",[e._v("HarmonyExportXXXDependency.Template.apply")]),e._v(" 方法中根据导出值的使用情况生成不同的导出语句")]),e._v(" "),_("li",[e._v("使用 DCE 工具删除 Dead Code，实现完整的树摇效果")])]),e._v(" "),_("p",[e._v("上述实现原理对背景知识要求较高，建议读者同步配合以下文档食用：")]),e._v(" "),_("ol",[_("li",[_("blockquote",[_("p",[e._v("["),_("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&mid=2247483744&idx=1&sn=d7128a76eed20746cd8c5100f0899138&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("万字总结] 一文吃透 Webpack 核心原理"),_("OutboundLink")],1)])])]),e._v(" "),_("li",[_("blockquote",[_("p",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&mid=2247483743&idx=1&sn=0ce0845ee3e5316bcac05993035de3ed&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("有点难的 webpack 知识点：Dependency Graph 深度解析"),_("OutboundLink")],1)])])]),e._v(" "),_("li",[_("blockquote",[_("p",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&mid=2247484088&idx=1&sn=41bf509a72f2cbcca1521747bf5e28f4&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack 原理系列六：彻底理解 Webpack 运行时"),_("OutboundLink")],1)])])])]),e._v(" "),_("h1",{attrs:{id:"三、最佳实践"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、最佳实践"}},[e._v("#")]),e._v(" 三、最佳实践")]),e._v(" "),_("p",[e._v("虽然 Webpack 自 2.x 开始就原生支持 Tree Shaking 功能，但受限于 JS 的动态特性与模块的复杂性，直至最新的 5.0 版本依然没有解决许多代码副作用带来的问题，使得优化效果并不如 Tree Shaking 原本设想的那么完美，所以需要使用者有意识地优化代码结构，或使用一些补丁技术帮助 Webpack 更精确地检测无效代码，完成 Tree Shaking 操作。")]),e._v(" "),_("h2",{attrs:{id:"_3-1-避免无意义的赋值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-避免无意义的赋值"}},[e._v("#")]),e._v(" 3.1 避免无意义的赋值")]),e._v(" "),_("p",[e._v("使用 Webpack 时，需要有意识规避一些不必要的赋值操作，观察下面这段示例代码：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/lP9iauFI73zicqIKtS2GZJAscn2mSicDf8VBHhOJzAibjZ4ojwicQ9ibjFaqzqRXUuJnewLRMnrwV8bIAW46ibRdxeicsA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),_("p",[e._v("示例中，"),_("code",[e._v("index.js")]),e._v(" 模块引用了 "),_("code",[e._v("bar.js")]),e._v(" 模块的 "),_("code",[e._v("foo")]),e._v(" 并赋值给 "),_("code",[e._v("f")]),e._v(" 变量，但后续并没有继续用到 "),_("code",[e._v("foo")]),e._v(" 或 "),_("code",[e._v("f")]),e._v(" 变量，这种场景下 "),_("code",[e._v("bar.js")]),e._v(" 模块导出的 "),_("code",[e._v("foo")]),e._v(" 值实际上并没有被使用，理应被删除，但 Webpack 的 Tree Shaking 操作并没有生效，产物中依然保留 "),_("code",[e._v("foo")]),e._v(" 导出：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/lP9iauFI73zicqIKtS2GZJAscn2mSicDf8VtLY9oia2TVlju0qbJGoWInkovRZOCQLynMUu3Oa7dYEYicjKODibQ6ibyQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),_("p",[e._v("造成这一结果，浅层原因是 Webpack 的 Tree Shaking 逻辑停留在代码静态分析层面，只是浅显地判断：")]),e._v(" "),_("ul",[_("li",[e._v("模块导出变量是否被其它模块引用")]),e._v(" "),_("li",[e._v("引用模块的主体代码中有没有出现这个变量")])]),e._v(" "),_("p",[e._v("没有进一步，从语义上分析模块导出值是不是真的被有效使用。")]),e._v(" "),_("p",[e._v("更深层次的原因则是 JavaScript 的赋值语句并不"),_("strong",[e._v("纯")]),e._v("，视具体场景有可能产生意料之外的副作用，例如：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("import { bar, foo } from \"./bar\";\n\nlet count = 0;\n\nconst mock = {}\n\nObject.defineProperty(mock, 'f', {\n    set(v) {\n        mock._f = v;\n        count += 1;\n    }\n})\n\nmock.f = foo;\n\nconsole.log(count);\n")])])]),_("p",[e._v("示例中，对 "),_("code",[e._v("mock")]),e._v(" 对象施加的 "),_("code",[e._v("Object.defineProperty")]),e._v(" 调用，导致 "),_("code",[e._v("mock.f = foo")]),e._v(" 赋值语句对 "),_("code",[e._v("count")]),e._v(" 变量产生了副作用，这种场景下即使用复杂的动态语义分析也很难在确保正确副作用的前提下，完美地 Shaking 掉所有无用的代码枝叶。")]),e._v(" "),_("p",[e._v("因此，在使用 Webpack 时开发者需要有意识地规避这些无意义的重复赋值操作。")]),e._v(" "),_("h2",{attrs:{id:"_3-3-使用-pure-标注纯函数调用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-使用-pure-标注纯函数调用"}},[e._v("#")]),e._v(" 3.3 使用 "),_("code",[e._v("#pure")]),e._v(" 标注纯函数调用")]),e._v(" "),_("p",[e._v("与赋值语句类似，JavaScript 中的函数调用语句也可能产生副作用，因此默认情况下 Webpack 并不会对函数调用做 Tree Shaking 操作。不过，开发者可以在调用语句前添加 "),_("code",[e._v("/*#__PURE__*/")]),e._v(" 备注，明确告诉 Webpack 该次函数调用并不会对上下文环境产生副作用，例如：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/lP9iauFI73zicqIKtS2GZJAscn2mSicDf8V2utVlJHFhqnC9zc8yKTKGibNAnpH8rmccvwr1B76Fw8jOMrbUSfJgpg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),_("p",[e._v("示例中，"),_("code",[e._v("foo('be retained')")]),e._v(" 调用没有带上 "),_("code",[e._v("/*#__PURE__*/")]),e._v(" 备注，代码被保留；作为对比，"),_("code",[e._v("foo('be removed')")]),e._v(" 带上 Pure 声明后则被 Tree Shaking 删除。")]),e._v(" "),_("h2",{attrs:{id:"_3-3-禁止-babel-转译模块导入导出语句"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-禁止-babel-转译模块导入导出语句"}},[e._v("#")]),e._v(" 3.3 禁止 Babel 转译模块导入导出语句")]),e._v(" "),_("p",[e._v("Babel 是一个非常流行的 JavaScript 代码转换器，它能够将高版本的 JS 代码等价转译为兼容性更佳的低版本代码，使得前端开发者能够使用最新的语言特性开发出兼容旧版本浏览器的代码。")]),e._v(" "),_("p",[e._v("但 Babel 提供的部分功能特性会致使 Tree Shaking 功能失效，例如 Babel 可以将 "),_("code",[e._v("import/export")]),e._v(" 风格的 ESM 语句等价转译为 CommonJS 风格的模块化语句，但该功能却导致 Webpack 无法对转译后的模块导入导出内容做静态分析，示例：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/lP9iauFI73zicqIKtS2GZJAscn2mSicDf8VRdVWW0uuUMMOosqwg9cTQic2WcuYbOQ5V8x1xXicgwz3bibmNxJcvnbVg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),_("p",[e._v("示例使用 "),_("code",[e._v("babel-loader")]),e._v(" 处理 "),_("code",[e._v("*.js")]),e._v(" 文件，并设置 Babel 配置项 "),_("code",[e._v("modules = 'commonjs'")]),e._v("，将模块化方案从 ESM 转译到 CommonJS，导致转译代码(右图上一)没有正确标记出未被使用的导出值 "),_("code",[e._v("foo")]),e._v("。作为对比，右图 2 为 "),_("code",[e._v("modules = false")]),e._v(" 时打包的结果，此时 "),_("code",[e._v("foo")]),e._v(" 变量被正确标记为 Dead Code。")]),e._v(" "),_("p",[e._v("所以，在 Webpack 中使用 "),_("code",[e._v("babel-loader")]),e._v(" 时，建议将 "),_("code",[e._v("babel-preset-env")]),e._v(" 的 "),_("code",[e._v("moduels")]),e._v(" 配置项设置为 "),_("code",[e._v("false")]),e._v("，关闭模块导入导出语句的转译。")]),e._v(" "),_("h2",{attrs:{id:"_3-4-优化导出值的粒度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-优化导出值的粒度"}},[e._v("#")]),e._v(" 3.4 优化导出值的粒度")]),e._v(" "),_("p",[e._v("Tree Shaking 逻辑作用在 ESM 的 "),_("code",[e._v("export")]),e._v(" 语句上，因此对于下面这种导出场景：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("export default {\n    bar: 'bar',\n    foo: 'foo'\n}\n")])])]),_("p",[e._v("即使实际上只用到 "),_("code",[e._v("default")]),e._v(" 导出值的其中一个属性，整个 "),_("code",[e._v("default")]),e._v(" 对象依然会被完整保留。所以实际开发中，应该尽量保持导出值颗粒度和原子性，上例代码的优化版本：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("const bar = 'bar'\nconst foo = 'foo'\n\nexport {\n    bar,\n    foo\n}\n")])])]),_("h2",{attrs:{id:"_3-5-使用支持-tree-shaking-的包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-使用支持-tree-shaking-的包"}},[e._v("#")]),e._v(" 3.5 使用支持 Tree Shaking 的包")]),e._v(" "),_("p",[e._v("如果可以的话，应尽量使用支持 Tree Shaking 的 npm 包，例如：")]),e._v(" "),_("ul",[_("li",[e._v("使用 "),_("code",[e._v("lodash-es")]),e._v(" 替代 "),_("code",[e._v("lodash")]),e._v(" ，或者使用 "),_("code",[e._v("babel-plugin-lodash")]),e._v(" 实现类似效果")])]),e._v(" "),_("p",[e._v("不过，并不是所有 npm 包都存在 Tree Shaking 的空间，诸如 React、Vue2 一类的框架原本已经对生产版本做了足够极致的优化，此时业务代码需要整个代码包提供的完整功能，基本上不太需要进行 Tree Shaking。")])])}),[],!1,null,null,null);_.default=o.exports}}]);