(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{327:function(a,_,t){"use strict";t.r(_);var e=t(4),v=Object(e.a)({},(function(){var a=this,_=a._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"大型复杂前端工程的优化方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大型复杂前端工程的优化方法"}},[a._v("#")]),a._v(" 大型复杂前端工程的优化方法")]),a._v(" "),_("blockquote",[_("p",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/0m_Sz1DXrd9JKrA-6SUg2w",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://mp.weixin.qq.com/s/0m_Sz1DXrd9JKrA-6SUg2w"),_("OutboundLink")],1)])]),a._v(" "),_("h2",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),_("p",[a._v("对于前端来讲，如果是去写一个简单页面，其实在写的过程中，很少会考虑到性能优化、错误监控这些。因为就一个页面而言，并不会对整个项目造成影响。但是就一个大型合作的前端项目而言，如果每个人不考虑性能优化的话，轻一点的问题就是：页面卡顿，操作不流畅。重一点的问题就是：页面卡死，内存崩溃，各种告警。所以基于了解,实践与收集，本人在此收集了大型前端项目中的一些性能优化方法，用以分享。不对地方还请斧正～")]),a._v(" "),_("h2",{attrs:{id:"_1-实现优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现优化"}},[a._v("#")]),a._v(" 1.实现优化")]),a._v(" "),_("h3",{attrs:{id:"_1-1-容器化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-容器化"}},[a._v("#")]),a._v(" 1.1 容器化")]),a._v(" "),_("p",[a._v("所谓的容器，即对于不同的文档，打开时，不再加载重复的代码，只需加载不同的文档数据即可。容器化有两种实现思路：")]),a._v(" "),_("h4",{attrs:{id:"_1-借助于客户端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-借助于客户端"}},[a._v("#")]),a._v(" 1. 借助于客户端")]),a._v(" "),_("p",[a._v("典型场景：列表页--\x3e选定文档--\x3e打开文档")]),a._v(" "),_("p",[a._v("用户选定文档后，点击链接进行打开的时候，并不会真的去打开一个新的 webview，而是进行 webview 的切换，APP 会一直保留一个 webview（代码已经加载好，是文档容器），此时将文档链接赋予容器，容器只需要拉取对应数据，不再重新加载新代码。")]),a._v(" "),_("h4",{attrs:{id:"_2-将代码集合到一个页面中-spa-方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-将代码集合到一个页面中-spa-方案"}},[a._v("#")]),a._v(" 2. 将代码集合到一个页面中（SPA 方案）")]),a._v(" "),_("p",[a._v("典型场景：列表页--\x3e选定文档--\x3e打开文档")]),a._v(" "),_("p",[a._v("当打开列表页后，然后迅速懒加载对应的文档容器代码。用户点击指定文档时，不再打开新的 webview 页面，而只是当前页面进行容器切换。用户退回列表页，仍然是在当前页面。")]),a._v(" "),_("h3",{attrs:{id:"_1-2-离线缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-离线缓存"}},[a._v("#")]),a._v(" 1.2 离线缓存")]),a._v(" "),_("p",[a._v("离线缓存处理的核心难点在于：离线数据的处理。离线资源处理现在一般有两种方案：")]),a._v(" "),_("h4",{attrs:{id:"_1-借助于客户端-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-借助于客户端-2"}},[a._v("#")]),a._v(" 1. 借助于客户端")]),a._v(" "),_("p",[a._v("典型场景：打开列表页。")]),a._v(" "),_("p",[a._v("当网页打开请求 html/js/css/图片的时候，APP 拦截网络请求，查找是否命中本地的资源，命中即直接返回。此场景需要注意客户端要建立代码更新机制，更新离线代码包。")]),a._v(" "),_("h4",{attrs:{id:"_2-service-workers"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-service-workers"}},[a._v("#")]),a._v(" 2. service workers")]),a._v(" "),_("p",[a._v("典型场景：打开列表页。")]),a._v(" "),_("p",[a._v("将资源注册后便能使用。但是必须使用 https 协议，同时还有 ios webview 兼容性问题。")]),a._v(" "),_("blockquote",[_("p",[a._v("可以参考这篇文章：前端离线化探索（http://www.alloyteam.com/2019/07/web-applications-offline/）")])]),a._v(" "),_("h3",{attrs:{id:"_1-3-数据序列化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-数据序列化"}},[a._v("#")]),a._v(" 1.3 数据序列化")]),a._v(" "),_("p",[a._v("典型场景：打开文档拉取后台数据的时候。")]),a._v(" "),_("p",[a._v("数据序列化即：将数据结构或对象编码，然后在网络间传输。")]),a._v(" "),_("p",[a._v("常见的协议有 XML/JSON/PB 等。对于一个很大的文档来言，xml 或者 json 用来传输数据，太过于冗余。但是如果采用复杂度太高的压缩算法如：Pako.js， 那这样反而提高了解压缩时间，得不偿失，所以找到一个适合的数据序列化方法至关重要。")]),a._v(" "),_("h3",{attrs:{id:"_1-4-按需加载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-按需加载"}},[a._v("#")]),a._v(" 1.4 按需加载")]),a._v(" "),_("h4",{attrs:{id:"_1-4-1-读写分离"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-读写分离"}},[a._v("#")]),a._v(" 1.4.1 读写分离")]),a._v(" "),_("p",[a._v("典型场景：打开文档拉取文档代码的时候。")]),a._v(" "),_("p",[a._v("读写分离也是按需加载的一种形式。")]),a._v(" "),_("p",[a._v("读写分离即：将用户区分开来，并不是所有的用户都要加载所有的代码，读的用户只需要加载读的代码，写的用户才需要读写的代码，这样对于读的用户较为友好。")]),a._v(" "),_("h4",{attrs:{id:"_1-4-2-按需引入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-按需引入"}},[a._v("#")]),a._v(" 1.4.2 按需引入")]),a._v(" "),_("p",[a._v("典型场景：开发中进行第三方库引入。")]),a._v(" "),_("p",[a._v("按需引入即只引用需要的代码。")]),a._v(" "),_("p",[a._v("按需引入常常会在开发中被忽略。如 只需要 lodash 中一个函数 "),_("code",[a._v("isEqual")]),a._v("，却将整个工具库进行了引入。 "),_("code",[a._v("import_from'lodash'")]),a._v("，无形增加更多冗余代码。通过引入单个函数即可改正： "),_("code",[a._v("importisEqualfrom'lodash.isEqual'")]),a._v("。")]),a._v(" "),_("h3",{attrs:{id:"_1-5-懒加载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-懒加载"}},[a._v("#")]),a._v(" 1.5 懒加载")]),a._v(" "),_("p",[a._v("典型场景：文档中一些比较不常用的功能。")]),a._v(" "),_("p",[a._v("懒加载即：对于部分功能代码等到需要的时候再进行加载。")]),a._v(" "),_("p",[a._v("懒加载有利于首屏打开时间。文档中一些不常用的功能，对于用户来讲，如果每次打开都去加载对应的代码，无疑是冗余的。通过拆分代码，等到用户需要时或者点击时，再去加载对应的代码。")]),a._v(" "),_("h3",{attrs:{id:"_1-6-使用-web-worker"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-使用-web-worker"}},[a._v("#")]),a._v(" 1.6 使用 web worker")]),a._v(" "),_("p",[a._v("典型场景：文档中打开时有大量复杂计算时。")]),a._v(" "),_("p",[a._v("web worker 是运行在后台的 JavaScript，不会影响页面的性能。")]),a._v(" "),_("p",[a._v("web worker 无疑是解决 js 计算能力弱的一大利器。如果将文档中复杂计算放到主线程中，页面卡顿不说，打开复杂文档的时候还很有可能崩溃掉。将计算挪入 web worker 中，将计算结果事件回调的方式返回，可以让用户使用更加流畅。")]),a._v(" "),_("h3",{attrs:{id:"_1-7-正则表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-正则表达式"}},[a._v("#")]),a._v(" 1.7 正则表达式")]),a._v(" "),_("p",[a._v("典型场景： 文档中的函数或者文本进行匹配的时候。")]),a._v(" "),_("p",[a._v("不好的正则表达式极易引起性能问题。其核心问题在于：js 的正则匹配是基于 NFA 的，易引起回溯问题。")]),a._v(" "),_("p",[a._v("正则引擎分为 NFA（非确定性有限状态自动机），和 DFA（确定性有限状态自动机）。")]),a._v(" "),_("p",[a._v("DFA 对于给定的任意一个状态和输入字符，DFA 只会转移到一个确定的状态。并且 DFA 不允许出现没有输入字符的状态转移。而 NFA 对于任意一个状态和输入字符，NFA 所能转移的状态是一个非空集合。模糊匹配、贪婪匹配、惰性匹配都会带来回溯问题。典型的正则匹配如 "),_("code",[a._v("(.\\*)+\\d")]),a._v(" ，便会进行回溯。那么平时开发的时候，")]),a._v(" "),_("ol",[_("li",[a._v("正则要越精确越好")]),a._v(" "),_("li",[a._v("改用 DFA 的正则引擎")])]),a._v(" "),_("p",[a._v("具体可以参考：浅谈正则表达式原理")]),a._v(" "),_("h3",{attrs:{id:"_1-8-使用缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-使用缓存"}},[a._v("#")]),a._v(" 1.8 使用缓存")]),a._v(" "),_("p",[a._v("典型场景：一堆非常需要耗时的数据，每次更新都需要重新计算，但是更新的频率并不高。")]),a._v(" "),_("p",[a._v("使用缓存可以有效的减少查找时间。")]),a._v(" "),_("p",[a._v("js 引擎是单线程的，对于大量复杂耗时的计算，会导致页面卡顿。可以通过将计算挪入 worker 中计算，也可以对于更新不频繁的计算进行缓存。")]),a._v(" "),_("ul",[_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("function complexCompute(){  let result;  ...  return result;}\n")])])]),_("p",[a._v("对于这种复杂计算，如果每次需要用到数据的时候都要去进行计算，那就得不偿失了，通过缓存，便能有效减少计算次数。")]),a._v(" "),_("ul",[_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("// 加入缓存let cache;function complexCompute(){  let result;  ...  cache = result;  return result;}\nfunction getResult (){  // 有更新的时候再进行计算  if(update){    complexCompute();  }  return cache;}\n")])])]),_("p",[a._v("这样便只会在更新的时候才会进行计算。")]),a._v(" "),_("h3",{attrs:{id:"_1-9-建立索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-建立索引"}},[a._v("#")]),a._v(" 1.9 建立索引")]),a._v(" "),_("p",[a._v("典型场景：查找一堆复杂数据，并且每个数据都有唯一 key。")]),a._v(" "),_("p",[a._v("建立索引的方式可以快速的提高查找速度。如一堆数据用数组进行存储。")]),a._v(" "),_("ul",[_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v('const persons = [  { name: "zhangsan", age: 12 },  { name: "lisi", age: 11 },];\n')])])]),_("p",[a._v("和用对象的方式进行存储。")]),a._v(" "),_("ul",[_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("const persons = {  zhangsan: {    age: 12,  },  lisi: {    age: 11,  },};\n")])])]),_("p",[a._v("进行查找 zhangsan 的 age，那么用数组的方式进行查找的时间复杂度是o(N)，用对象的时间复杂度是o(1)。")]),a._v(" "),_("h1",{attrs:{id:"_2-架构优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-架构优化"}},[a._v("#")]),a._v(" 2.架构优化")]),a._v(" "),_("h2",{attrs:{id:"_2-1-设计模式六大基本原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-设计模式六大基本原则"}},[a._v("#")]),a._v(" 2.1 设计模式六大基本原则")]),a._v(" "),_("p",[a._v("五大原则和一个法则：")]),a._v(" "),_("ul",[_("li",[_("strong",[a._v("单一职责原则(Single Responsibility Principle, SRP)")]),a._v(": 一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因")]),a._v(" "),_("li",[_("strong",[a._v("开闭原则(Open-Closed Principle, OCP)")]),a._v(": 一个软件实体应当对扩展开放，对修改关闭")]),a._v(" "),_("li",[_("strong",[a._v("里氏代换原则(Liskov Substitution Principle, LSP)")]),a._v(": 所有引用基类（父类）的地方必须能透明地使用其子类的对象")]),a._v(" "),_("li",[_("strong",[a._v("依赖倒转原则(Dependency Inversion Principle, DIP)")]),a._v(": 抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程")]),a._v(" "),_("li",[_("strong",[a._v("接口隔离原则(Interface Segregation Principle, ISP)")]),a._v(": 使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。")]),a._v(" "),_("li",[_("strong",[a._v("迪米特法则(Law of Demeter, LoD)（最少知识法则）")]),a._v(": 一个软件实体应当尽可能少地与其他实体发生相互作用。")])]),a._v(" "),_("h2",{attrs:{id:"_2-2-组件库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-组件库"}},[a._v("#")]),a._v(" 2.2 组件库")]),a._v(" "),_("p",[a._v("它的核心意义在于代码复用。功能相对单一或者独立，在整个系统的代码层次上位于最底层，被其他代码所依赖。比如说我们常用的一些 UI 组件，逻辑组件等。")]),a._v(" "),_("p",[a._v("组件的核心在于：")]),a._v(" "),_("ol",[_("li",[a._v("通用性")]),a._v(" "),_("li",[a._v("与业务无关")]),a._v(" "),_("li",[a._v("兼容性")])]),a._v(" "),_("p",[a._v("通过将一些通用的 UI 和逻辑拆分成组件，不仅可以让代码更简洁，更容易维护，而且高内聚，低耦合。")]),a._v(" "),_("h2",{attrs:{id:"_2-3-lerna-管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-lerna-管理"}},[a._v("#")]),a._v(" 2.3 lerna 管理")]),a._v(" "),_("p",[a._v("当一个大的项目库代码量剧增之后，管理起来就是一件比较麻烦的事情，为了方便代码的共享，就需要将代码库拆分成独立的包。Lerna 便是优化和管理 JS 多包项目的利器。")]),a._v(" "),_("p",[a._v("典型目录如下所示：")]),a._v(" "),_("ul",[_("li"),a._v(" "),_("li"),a._v(" "),_("li")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("base/package.json;packages/package-1/ package.json;package-2/package.json;\n")])])]),_("h2",{attrs:{id:"_2-4-享元模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-享元模式"}},[a._v("#")]),a._v(" 2.4 享元模式")]),a._v(" "),_("p",[a._v("典型场景：excel 的 openxml 规范。")]),a._v(" "),_("p",[a._v("享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。")]),a._v(" "),_("p",[a._v("openxml 中对于数据的管理，基本上都是用享元模式实现的。")]),a._v(" "),_("p",[a._v("如 1 个文档中有 1000 个相同的字符串。 "),_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/q2ntl21QGgVlrvQzIDBx5icyZqRMFdiaR1Mxbe7ksc4Hu4hlMIwZGw4KlkogtwuxxAVH0WoqqUgkaQqpj6SicBIfA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),a._v(" "),_("p",[a._v("excel 并不会真的就存储 1000 个字符串。他只会存储一个字符串。")]),a._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/q2ntl21QGgVlrvQzIDBx5icyZqRMFdiaR18lnbC7VQLeOuhoYS0saicyZLO8o5VxrRx1OOhARrzBib6yMR6bqqTt0w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),a._v(" "),_("p",[a._v("而具体每个格子存储的是这个字符的下标索引。")]),a._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/q2ntl21QGgVlrvQzIDBx5icyZqRMFdiaR1QA7bXQHWZYlYJ3Ac0uW6GSJ6VyfaWDk8kPpkzlCIRMIv3RXtumcY9w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),a._v(" "),_("p",[a._v("这样无疑大大节省了存储空间。")]),a._v(" "),_("h1",{attrs:{id:"_3-构建优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-构建优化"}},[a._v("#")]),a._v(" 3. 构建优化")]),a._v(" "),_("h2",{attrs:{id:"_3-1-webpack-打包优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-webpack-打包优化"}},[a._v("#")]),a._v(" 3.1 webpack 打包优化")]),a._v(" "),_("h3",{attrs:{id:"_3-1-1-公共包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-公共包"}},[a._v("#")]),a._v(" 3.1.1 公共包")]),a._v(" "),_("p",[a._v("webpack3 是用的CommonsChunkPlugin用以实现提取第三方库和公共模块如 node_modules 下面的文件。")]),a._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/q2ntl21QGgVlrvQzIDBx5icyZqRMFdiaR15jyGAd97MFXbaaQh1ljXkwn8K7D6ssdQLrUeEQ58wLZBtVibx5RGonA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),a._v(" "),_("p",[a._v("webpack4 进行了改进，用optimization.splitChunks代替了 CommonsChunkPlugin。 commonschunkPlugin 的问题在于：它将所有的公共包合成了一个 commonChunk，但是并不是所有的子模块需要这个 commonChunk 的所有内容。")]),a._v(" "),_("p",[_("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/q2ntl21QGgVlrvQzIDBx5icyZqRMFdiaR1XlT9CESosgiavKd9DnmbOT5hxhYqtuObnqWrJAxxbibFU2HKotbsGHWw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),a._v(" "),_("p",[a._v("与 CommonsChunkPlugin 的父子关系思路不同的是，SplitChunksPlugin 引入了 chunkGroup 的概念，在入口 chunk 和异步 chunk 中发现被重复使用的模块，将重叠的模块以 vendor-chunk 的形式分离出来，也就是 vendor-chunk 可能有多个，不再受限于是所有 chunk 中都共同存在的模块。")]),a._v(" "),_("p",[a._v("splitChunks 是开箱即用的，常见配置如下：")]),a._v(" "),_("ul",[_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("optimization: {  splitChunks: {    chunks: 'all',    minSize: 20000,    maxSize: 0,    minChunks: 1,    maxAsyncRequests: 6,    maxInitialRequests: 4,    automaticNameDelimiter: '~',    enforceSizeThreshold: 50000,    cacheGroups: {      defaultVendors: {        test: /[\\\\/]node_modules[\\\\/]/,        priority: -10      }    }  }}\n")])])]),_("p",[a._v("可以通过 cacheGroup 制定更细的规则。")]),a._v(" "),_("h3",{attrs:{id:"_3-1-2-动态导入-dynamic-imports"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-动态导入-dynamic-imports"}},[a._v("#")]),a._v(" 3.1.2 动态导入(dynamic imports)")]),a._v(" "),_("p",[a._v("通过动态导入进而实现懒加载和代码分离，进而可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。")]),a._v(" "),_("p",[a._v("当涉及到动态代码拆分时，webpack 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 ECMAScript 提案 的 "),_("code",[a._v("import()")]),a._v("语法。如下所示：")]),a._v(" "),_("ul",[_("li"),a._v(" "),_("li"),a._v(" "),_("li")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v('return import(/* webpackChunkName: "lodash" */ "lodash").then((_) => {  _.join(["Hello", "webpack"]);});\n')])])]),_("h3",{attrs:{id:"_3-1-3-tree-shaking"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-tree-shaking"}},[a._v("#")]),a._v(" 3.1.3 tree-shaking")]),a._v(" "),_("p",[a._v("tree-shaking 通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)。比如：")]),a._v(" "),_("p",[a._v("index.js")]),a._v(" "),_("ul",[_("li"),a._v(" "),_("li")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v('import { cube } from "./math.js";console.log(cube(5));\n')])])]),_("p",[a._v("cube.js")]),a._v(" "),_("ul",[_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li"),a._v(" "),_("li")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("export function square(x) {  return x * x;}\nexport function cube(x) {  return x * x * x;}\n")])])]),_("p",[a._v("其中 cube.js 中的square就属于未引用代码，打包时不需要。 通过在依赖包中的 package.json 里面写入：")]),a._v(" "),_("ul",[_("li")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v('"sideEffects": false,\n')])])]),_("p",[a._v("即可开启依赖包的 tree-shaking。")]),a._v(" "),_("p",[a._v("但是使用 tree-shaking 要有三条规则。")]),a._v(" "),_("ol",[_("li",[a._v("使用 ES2015 模块语法（即 import 和 export）。")]),a._v(" "),_("li",[a._v('在项目 package.json 文件中，添加一个 "sideEffects" 入口。')]),a._v(" "),_("li",[a._v("引入一个能够删除未引用代码(dead code)的压缩工具(minifier)（例如 UglifyJSPlugin）。")])]),a._v(" "),_("p",[a._v("具体的例子可以看 https://github.com/webpack/webpack/tree/master/examples/side-effects 这个。")])])}),[],!1,null,null,null);_.default=v.exports}}]);